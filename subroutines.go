package pqringct


// rpulpProve generates balance proof
func rpulpProve() (rpulppf []byte) {
	//TODO: add inputs
	return nil
}

// rpulpVerify verify the proof generated by rpulpProve
func rpulpVerify() (valid bool) {
	//TODO: add inputs
	return false
}

// elrsSign genarates authorizing and authentication proof
func elrsSign() (*Signature, *Image) {
	//TODO: add inputs
	return nil, nil
}

// elrsVerify verify the authorizing and authentication proof generated by elrsSign
func elrsVerify() (valid bool) {
	// TODO: add inputs
	return false
}

/**
todo: generate MatrixA from pp.Cstr
 */
func (pp *PublicParameter) ExpandPubMatrixA() (matrixA []*PolyNTTVec) {
	matrix := make([]*PolyNTTVec, pp.paramKa)

	for i := 0; i < pp.paramKa; i++ {
		matrix[i].vec = make([]*PolyNTT, pp.paramLa)
		// todo
	}

	return matrixA
}

/*
todo: expand a seed to a PolyVec with length l_a from (S_r)^d
 */
func (pp *PublicParameter) ExpandKeyA(seed []byte) (sp *PolyVec) {

	vec := make([]*Poly, pp.paramLa)
//	todo
	sp = &PolyVec{
		vec: vec,
	}
	return sp
}